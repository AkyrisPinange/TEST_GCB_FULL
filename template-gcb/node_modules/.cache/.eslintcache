[{"/Users/effetive/Documents/React-APP/template-gcb/src/index.tsx":"1","/Users/effetive/Documents/React-APP/template-gcb/src/App.tsx":"2","/Users/effetive/Documents/React-APP/template-gcb/src/routes.tsx":"3","/Users/effetive/Documents/React-APP/template-gcb/src/pages/doctors/index.tsx":"4","/Users/effetive/Documents/React-APP/template-gcb/src/pages/home/index.tsx":"5","/Users/effetive/Documents/React-APP/template-gcb/src/componetes/Header/index.tsx":"6","/Users/effetive/Documents/React-APP/template-gcb/src/services/api.ts":"7","/Users/effetive/Documents/React-APP/template-gcb/src/pages/doctors/Form/index.tsx":"8","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/index.tsx":"9","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/App.tsx":"10","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/routes.tsx":"11","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/componetes/Header/index.tsx":"12","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/home/index.tsx":"13","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/doctors/index.tsx":"14","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/doctors/Form/index.tsx":"15","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/services/api.ts":"16"},{"size":247,"mtime":1646271792657,"results":"17","hashOfConfig":"18"},{"size":281,"mtime":1646271267847,"results":"19","hashOfConfig":"18"},{"size":558,"mtime":1646691763648,"results":"20","hashOfConfig":"18"},{"size":3112,"mtime":1646707117876,"results":"21","hashOfConfig":"18"},{"size":111,"mtime":1646269544125,"results":"22","hashOfConfig":"18"},{"size":811,"mtime":1646272893911,"results":"23","hashOfConfig":"18"},{"size":115,"mtime":1646265569732,"results":"24","hashOfConfig":"18"},{"size":12344,"mtime":1646704382078,"results":"25","hashOfConfig":"18"},{"size":247,"mtime":1646271792657,"results":"26","hashOfConfig":"27"},{"size":281,"mtime":1646271267847,"results":"28","hashOfConfig":"27"},{"size":558,"mtime":1646691763648,"results":"29","hashOfConfig":"27"},{"size":811,"mtime":1646272893911,"results":"30","hashOfConfig":"27"},{"size":111,"mtime":1646269544125,"results":"31","hashOfConfig":"27"},{"size":3142,"mtime":1646740107896,"results":"32","hashOfConfig":"27"},{"size":12374,"mtime":1646711493467,"results":"33","hashOfConfig":"27"},{"size":115,"mtime":1646265569732,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"z4uzlg",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ryo23w",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/effetive/Documents/React-APP/template-gcb/src/index.tsx",[],[],["88","89"],"/Users/effetive/Documents/React-APP/template-gcb/src/App.tsx",[],[],"/Users/effetive/Documents/React-APP/template-gcb/src/routes.tsx",[],[],["90","91"],"/Users/effetive/Documents/React-APP/template-gcb/src/pages/doctors/index.tsx",["92","93","94"],[],"import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport api from \"../../services/api\";\n\nimport \"./index.css\";\n\ninterface IDoctor {\n  ID: string;\n  adress_id: string;\n  NOME: string;\n  CRM: number;\n  TELFIXO: number;\n  TELCELULAR: number;\n  BAIRRO: string;\n  UF: string;\n  LOCALIDADE: string;\n}\n\nconst Doctors: React.FC = () => {\n  var num = 0;\n\n  const [doctors, setDoctors] = useState<IDoctor[]>([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    loadDoctors(\" \");\n  }, []);\n\n  async function loadDoctors(search:string) {\n    const response = await api.get(`/InfoDoctorsSpecialties/${search}`);\n    console.log(response);\n\n    setDoctors(response.data);\n  }\n\n  function newDoctor() {\n    history.push(\"/doctors_register\");\n  }\n\n  function SearchDoctors(e: ChangeEvent<HTMLInputElement>) {\n    loadDoctors(e.target.value);\n  }\n\n  async function EditDoctor(ID: string, ID_adress: string) {\n    history.push(`/doctors_register/${btoa(ID)}&&${btoa(ID_adress)}`);\n  }\n\n  async function DeleteDoctor(ID: string, ID_adress: string) {\n    const responseAdress = await api.delete(`/Adress/${ID_adress}`);\n    const responseDoctor = await api.delete(`/InfoDoctors/${ID}`);\n  }\n\n  return (\n    <div className=\"container\">\n      <br />\n      <div className=\"Header-doctors\">\n        <h1>Medicos</h1>\n        <Form.Group>\n          <Form.Label>Pesquisar\n          </Form.Label>\n          <Form.Control \n          type=\"text\"\n          name=\"search\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => SearchDoctors(e)}/>\n        </Form.Group>\n        <Button variant=\"dark\" size=\"sm\" onClick={newDoctor}>\n          Novo Medico\n        </Button>\n      </div>\n      <br />\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Nome</th>\n            <th>CRM</th>\n            <th>Tel. Celular</th>\n            <th>Tel. Fixo</th>\n            <th>Bairro</th>\n            <th>Cidade</th>\n            <th>Estado</th>\n            <th>Ações</th>\n          </tr>\n        </thead>\n        <tbody>\n          {doctors.map((doctor) => (\n            <tr key={num++}>\n              <td>{doctor.NOME}</td>\n              <td>{doctor.CRM}</td>\n              <td>{doctor.TELCELULAR}</td>\n              <td>{doctor.TELFIXO}</td>\n              <td>{doctor.BAIRRO}</td>\n              <td>{doctor.LOCALIDADE}</td>\n              <td>{doctor.UF}</td>\n              <td>\n                <Button\n                  size=\"sm\"\n                  variant=\"warning\"\n                  onClick={() => EditDoctor(doctor.ID, doctor.adress_id)}\n                >\n                  Editar\n                </Button>{\" \"}\n                <Button\n                  size=\"sm\"\n                  variant=\"danger\"\n                  onClick={() => DeleteDoctor(doctor.ID, doctor.adress_id)}\n                >\n                  Remover\n                </Button>{\" \"}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Doctors;\n","/Users/effetive/Documents/React-APP/template-gcb/src/pages/home/index.tsx",[],[],"/Users/effetive/Documents/React-APP/template-gcb/src/componetes/Header/index.tsx",[],[],"/Users/effetive/Documents/React-APP/template-gcb/src/services/api.ts",[],[],"/Users/effetive/Documents/React-APP/template-gcb/src/pages/doctors/Form/index.tsx",["95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114"],[],"import React, { useState, useEffect, ChangeEvent, KeyboardEvent } from \"react\";\nimport { Button, Form, Col, Row, Alert } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport InputMask from \"react-input-mask\";\n\nimport * as Yup from \"yup\";\n\nimport api from \"../../../services/api\";\n\nimport \"./../index.css\";\n\nvar SpecialtiesSelect: any;\nvar IDs: any;\n//inferces para facilitar a manipulação dos dados\ninterface IDoctor {\n  id: string;\n  nome: string;\n  crm: number;\n  telFixo: number;\n  telCelular: number;\n}\n\ntype OptionType = {\n  value: string;\n  label: string;\n};\ninterface ISpecialtiesDoctor {\n  id_doctor: string;\n  id_specialties: string;\n}\n\ninterface IAdress {\n  id: string;\n  cep: string;\n  logradouro: string;\n  complemento: string;\n  bairro: string;\n  localidade: string;\n  id_doctor: string;\n  uf: string;\n}\n\ninterface Icep {\n  cep: string;\n}\n\nconst listSpecialties = [\n  \"Alergologia\",\n  \"Angiologia\",\n  \"Buco maxilo\",\n  \"Cardiologia clínca\",\n  \"Cardiologia infantil\",\n  \"Cirurgia cabeça e pescoço\",\n  \"Cirurgia cardíaca\",\n  \"Cirurgia de tórax\",\n];\n\n//dados para o dropdowns\nconst SpecialtiesOptions: OptionType[] = [\n  { value: \"Alergologia\", label: \"Alergologia\" },\n  { value: \"Angiologia\", label: \"Angiologia\" },\n  { value: \"Buco maxilo\", label: \"Buco maxilo\" },\n  { value: \"Cardiologia clínca\", label: \"Cardiologia clínca\" },\n  { value: \"Cardiologia infantil\", label: \"Cardiologia infantil\" },\n  { value: \"Cirurgia cabeça e pescoço\", label: \"Cirurgia cabeça e pescoço\" },\n  { value: \"Cirurgia cardíaca\", label: \"Cirurgia cardíaca\" },\n  { value: \"Cirurgia de tórax\", label: \"Cirurgia de tórax\" },\n];\n\n//REACT\nconst Doctors: React.FC = () => {\n  useEffect(() => {\n    loadSpecialties();\n  });\n\n  const history = useHistory();\n  const params = useParams();\n\n  useEffect(() => {\n    //valida de é updade\n    if (params) {\n      console.log(params);\n      FindDoctorAdress(params);\n    }\n  }, [params]);\n\n  //useState\n  const [cep, setCep] = useState<Icep>({\n    cep: \"\",\n  });\n\n  const [specialtiesDoctor, setSpecialtiesDoctor] =\n    useState<ISpecialtiesDoctor>({\n      id_doctor: \"\",\n      id_specialties: \"\",\n    });\n\n  const [adress, setAdress] = useState<IAdress>({\n    id: \"\",\n    cep: \"\",\n    logradouro: \"\",\n    complemento: \"\",\n    bairro: \"\",\n    localidade: \"\",\n    id_doctor: \"\",\n    uf: \"\",\n  });\n\n  const [doctor, setDoctor] = useState<IDoctor>({\n    id: \"\",\n    nome: \"\",\n    crm: 0,\n    telFixo: 0,\n    telCelular: 0,\n  });\n\n  //cadastra especialidades no banco se não existirem\n  async function loadSpecialties() {\n    const getSpecialties = await api.get(\"/Specialties\");\n\n    if (getSpecialties.data.length == 0) {\n      listSpecialties.forEach((index) => {\n        registerSpecialties(index);\n      });\n    }\n\n    // SpecialtiesSelect = getSpecialties.data;\n  }\n\n  async function registerSpecialties(specialties: string) {\n    const responseSpecialties = await api.post(\"Specialties\", {\n      name: specialties,\n    });\n  }\n\n  //funcao responsavel por consultar o cep\n  async function GetCep(this: any, e: ChangeEvent<HTMLInputElement>) {\n    setAdress({\n      ...adress, //garante que o input só recebera numeros\n      [e.target.name]: e.target.value.replace(/\\D/g, \"\"),\n    });\n    let lengthCep = e.target.value.replace(/\\D/g, \"\").length;\n    let cepNumber = e.target.value.replace(/\\D/g, \"\");\n\n    //valida se o usuario digitou os 8 digitos cep para poder fazer a requisicao\n    if (lengthCep == 8) {\n      const resp = await api.post(`/CEP/${cepNumber}`);\n      console.log(resp.data.cep);\n      setAdress({\n        id: \"\",\n        cep: resp.data.cep == undefined ? \"\" : resp.data.cep,\n        logradouro:\n          resp.data.logradouro == undefined ? \"\" : resp.data.logradouro,\n        complemento:\n          resp.data.complemento == undefined ? \"\" : resp.data.complemento,\n        bairro: resp.data.bairro == undefined ? \"\" : resp.data.bairro,\n        localidade:\n          resp.data.localidade == undefined ? \"\" : resp.data.localidade,\n        uf: resp.data.uf == undefined ? \"\" : resp.data.uf,\n        id_doctor: \"\",\n      });\n    }\n  }\n\n  function UpdatedSpecialties(e: any) {\n    SpecialtiesSelect = e;\n  }\n  function UpdatedDoctor(e: ChangeEvent<HTMLInputElement>) {\n    setDoctor({\n      ...doctor,\n      [e.target.name]: e.target.value,\n    });\n  }\n  function UpdatedAdress(e: ChangeEvent<HTMLInputElement>) {\n    setAdress({\n      ...adress,\n      [e.target.name]: e.target.value,\n    });\n  }\n  \n\n  async function FindDoctorAdress(params: { ID?: any }) {\n    let IDs = params.ID.split(\"&&\");\n    let id_doctor = atob(IDs[0]);\n    let id_adress = atob(IDs[1]);\n    console.log('LOG ad: '+ id_adress);\n    console.log('LOG: doc '+ id_doctor);\n\n    const responseAdress = await api.post(`/AdressById/${id_adress}`);\n    const responseDoctor = await api.post(`/InfoDoctorsById/${id_doctor}`);\n\n    //\n    setAdress({\n      id: id_adress,\n      cep: responseAdress.data.cep,\n      logradouro: responseAdress.data.logradouro,\n      complemento: responseAdress.data.complemento,\n      bairro: responseAdress.data.bairro,\n      localidade: responseAdress.data.localidade,\n      uf: responseAdress.data.uf,\n      id_doctor: id_doctor,\n    });\n\n    setDoctor({\n      id: id_doctor,\n      nome: responseDoctor.data.nome,\n      crm: responseDoctor.data.crm,\n      telFixo: responseDoctor.data.telFixo,\n      telCelular: responseDoctor.data.telCelular,\n    });\n  }\n\n  async function onSubmit(e: ChangeEvent<HTMLFormElement>) {\n    e.preventDefault();\n\n    let numberCel = doctor.telCelular\n      .toString()\n      .replaceAll(\"(\", \"\")\n      .replace(\")\", \"\")\n      .replace(\"-\", \"\");\n    let numberFix = doctor.telFixo\n      .toString()\n      .replace(\"(\", \"\")\n      .replace(\")\", \"\")\n      .replace(\"-\", \"\");\n\n    doctor.telCelular = parseInt(numberCel);\n    doctor.telFixo = parseInt(numberFix);\n\n    //se é insert\n    if (!params) {\n      const respDoctor = await api.post(\"/InfoDoctors\", doctor);\n      adress.id_doctor = respDoctor.data.id;\n      const respAdress = await api.post(\"/Adress\", adress);\n\n      var arraySpecialties: any[] = [];\n      const respSpecialties = await api.get(\"/Specialties\");\n\n      console.log(SpecialtiesSelect);\n      SpecialtiesSelect.forEach((index: any) => {\n        arraySpecialties.push(\n          respSpecialties.data.filter(\n            (s: { name: string }) => s.name === index.value\n          )\n        );\n      });\n\n      await Promise.all(\n        arraySpecialties.map(async (elem) => {\n          let id_specialties = elem[0].id;\n          let id_doctor = respDoctor.data.id;\n\n          const respSpecialtiesDoctor = await api.post(\n            \"/InfoDoctorsSpecialties\",\n            {\n              id_specialties: id_specialties,\n              id_doctor: id_doctor,\n            }\n          );\n        })\n      );\n    }else{\n      const respDoctor = await api.put(`/InfoDoctors/${doctor.id}`, doctor);\n      adress.id_doctor = respDoctor.data.id;\n      const respAdress = await api.put(`/Adress/${adress.id}`, adress);\n    }\n    Back()\n  }\n\n  function Back() {\n    history.goBack();\n  }\n\n  return (\n    <div className=\"container\">\n      <br />\n      <div className=\"Header-doctors\">\n        <h1>Cadastro</h1>\n        <Button variant=\"dark\" size=\"sm\" onClick={Back}>\n          Voltar\n        </Button>\n      </div>\n      <br />\n      <div className=\"container\">\n        <Form onSubmit={onSubmit}>\n          <Form.Group>\n            <Form.Label>Nome</Form.Label>\n            <Form.Control\n              maxLength={120}\n              value={doctor.nome}\n              type=\"text\"\n              name=\"nome\"\n              onChange={(e: ChangeEvent<HTMLInputElement>) => UpdatedDoctor(e)}\n            />\n          </Form.Group>\n          <br />\n          <Form.Group>\n            <Row>\n              <Col>\n                <Form.Label>Tel. Celular</Form.Label>\n                <InputMask\n                  placeholder=\"(81)88888-8888\"\n                  value={doctor.telCelular}\n                  className=\"phone\"\n                  name=\"telCelular\"\n                  mask=\"(99)999999-9999\"\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedDoctor(e)\n                  }\n                />\n              </Col>\n              <Col>\n                <Form.Label>Tel. Fixo</Form.Label>\n                <InputMask\n                  placeholder=\"(81)88888-8888\"\n                  value={doctor.telFixo}\n                  className=\"phone\"\n                  name=\"telFixo\"\n                  mask=\"(99)999999-9999\"\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedDoctor(e)\n                  }\n                />\n              </Col>\n              <Col>\n                <Form.Label>CRM</Form.Label>\n                <Form.Control\n                  maxLength={7}\n                  value={doctor.crm}\n                  type=\"text\"\n                  name=\"crm\"\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedDoctor(e)\n                  }\n                />\n              </Col>\n            </Row>\n            <br />\n            <Form.Label>Especialidades</Form.Label>\n            <Select\n              isMulti\n              name=\"specialties\"\n              options={SpecialtiesOptions}\n              className=\"basic-multi-select\"\n              classNamePrefix=\"Selecione\"\n              placeholder=\"Selecione\"\n              onChange={(e: any) => UpdatedSpecialties(e)}\n            />\n          </Form.Group>\n          <br />\n          <h3>Cadastro de Endereço</h3>\n\n          <Form.Group>\n            <Row>\n              <Col>\n                <Form.Label>CEP</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  name=\"cep\"\n                  maxLength={8}\n                  placeholder=\"Digite o CEP\"\n                  value={adress.cep}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) => GetCep(e)}\n                />\n              </Col>\n              <Col>\n                <Form.Label>Cidade</Form.Label>\n                <Form.Control\n                  placeholder=\"\"\n                  type=\"text\"\n                  name=\"localidade\"\n                  value={adress.localidade}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedAdress(e)\n                  }\n                />\n              </Col>\n              <Col>\n                <Form.Label>Estado</Form.Label>\n                <Form.Control\n                  placeholder=\"\"\n                  type=\"text\"\n                  name=\"uf\"\n                  value={adress.uf}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedAdress(e)\n                  }\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Form.Label>Logradouro</Form.Label>\n                <Form.Control\n                  placeholder=\"\"\n                  type=\"text\"\n                  name=\"logradouro\"\n                  value={adress.logradouro}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedAdress(e)\n                  }\n                />\n              </Col>\n              <Col>\n                <Form.Label>Bairro</Form.Label>\n                <Form.Control\n                  placeholder=\"\"\n                  type=\"text\"\n                  name=\"bairro\"\n                  value={adress.bairro}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedAdress(e)\n                  }\n                />\n              </Col>\n              <Col>\n                <Form.Label>Complemento</Form.Label>\n                <Form.Control\n                  placeholder=\"\"\n                  type=\"text\"\n                  name=\"complemento\"\n                  value={adress.complemento}\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                    UpdatedAdress(e)\n                  }\n                />\n              </Col>\n            </Row>\n          </Form.Group>\n          <br />\n          <Button variant=\"dark\" type=\"submit\">\n            Salvar\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n};\n\nexport default Doctors;\n","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/index.tsx",[],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/App.tsx",[],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/routes.tsx",[],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/componetes/Header/index.tsx",[],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/home/index.tsx",[],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/doctors/index.tsx",["115","116","117"],[],"import React, { useState, useEffect, ChangeEvent } from \"react\";\nimport { Table, Button, Form } from \"react-bootstrap\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nimport api from \"../../services/api\";\n\nimport \"./index.css\";\n\ninterface IDoctor {\n  ID: string;\n  adress_id: string;\n  NOME: string;\n  CRM: number;\n  TELFIXO: number;\n  TELCELULAR: number;\n  BAIRRO: string;\n  UF: string;\n  LOCALIDADE: string;\n}\n\nconst Doctors: React.FC = () => {\n  var num = 0;\n\n  const [doctors, setDoctors] = useState<IDoctor[]>([]);\n  const history = useHistory();\n\n  useEffect(() => {\n    loadDoctors(\"a\");\n  }, []);\n\n  async function loadDoctors(search:string) {\n    const response = await api.get(`/InfoDoctorsSpecialties/${search}`);\n    console.log(response);\n\n    setDoctors(response.data);\n  }\n\n  function newDoctor() {\n    history.push(\"/doctors_register\");\n  }\n\n  function SearchDoctors(e: ChangeEvent<HTMLInputElement>) {\n    loadDoctors(e.target.value);\n  }\n\n  async function EditDoctor(ID: string, ID_adress: string) {\n    history.push(`/doctors_register/${btoa(ID)}&&${btoa(ID_adress)}`);\n  }\n\n  async function DeleteDoctor(ID: string, ID_adress: string) {\n    const responseAdress = await api.delete(`/Adress/${ID_adress}`);\n    const responseDoctor = await api.delete(`/InfoDoctors/${ID}`);\n    window.location.reload();\n  }\n\n  return (\n    <div className=\"container\">\n      <br />\n      <div className=\"Header-doctors\">\n        <h1>Medicos</h1>\n        <Form.Group>\n          <Form.Label>Pesquisar\n          </Form.Label>\n          <Form.Control \n          type=\"text\"\n          name=\"search\"\n          onChange={(e: ChangeEvent<HTMLInputElement>) => SearchDoctors(e)}/>\n        </Form.Group>\n        <Button variant=\"dark\" size=\"sm\" onClick={newDoctor}>\n          Novo Medico\n        </Button>\n      </div>\n      <br />\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Nome</th>\n            <th>CRM</th>\n            <th>Tel. Celular</th>\n            <th>Tel. Fixo</th>\n            <th>Bairro</th>\n            <th>Cidade</th>\n            <th>Estado</th>\n            <th>Ações</th>\n          </tr>\n        </thead>\n        <tbody>\n          {doctors.map((doctor) => (\n            <tr key={num++}>\n              <td>{doctor.NOME}</td>\n              <td>{doctor.CRM}</td>\n              <td>{doctor.TELCELULAR}</td>\n              <td>{doctor.TELFIXO}</td>\n              <td>{doctor.BAIRRO}</td>\n              <td>{doctor.LOCALIDADE}</td>\n              <td>{doctor.UF}</td>\n              <td>\n                <Button\n                  size=\"sm\"\n                  variant=\"warning\"\n                  onClick={() => EditDoctor(doctor.ID, doctor.adress_id)}\n                >\n                  Editar\n                </Button>{\" \"}\n                <Button\n                  size=\"sm\"\n                  variant=\"danger\"\n                  onClick={() => DeleteDoctor(doctor.ID, doctor.adress_id)}\n                >\n                  Remover\n                </Button>{\" \"}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Doctors;\n","/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/pages/doctors/Form/index.tsx",["118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137"],[],"/Users/effetive/Documents/TEST_GCB_FULL/template-gcb/src/services/api.ts",[],[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"138","replacedBy":"142"},{"ruleId":"140","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":3,"column":22,"nodeType":"146","messageId":"147","endLine":3,"endColumn":31},{"ruleId":"144","severity":1,"message":"148","line":51,"column":11,"nodeType":"146","messageId":"147","endLine":51,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":52,"column":11,"nodeType":"146","messageId":"147","endLine":52,"endColumn":25},{"ruleId":"144","severity":1,"message":"150","line":1,"column":51,"nodeType":"146","messageId":"147","endLine":1,"endColumn":64},{"ruleId":"144","severity":1,"message":"151","line":2,"column":34,"nodeType":"146","messageId":"147","endLine":2,"endColumn":39},{"ruleId":"144","severity":1,"message":"152","line":7,"column":13,"nodeType":"146","messageId":"147","endLine":7,"endColumn":16},{"ruleId":"144","severity":1,"message":"153","line":14,"column":5,"nodeType":"146","messageId":"147","endLine":14,"endColumn":13},{"ruleId":"144","severity":1,"message":"154","line":89,"column":10,"nodeType":"146","messageId":"147","endLine":89,"endColumn":13},{"ruleId":"144","severity":1,"message":"155","line":89,"column":15,"nodeType":"146","messageId":"147","endLine":89,"endColumn":21},{"ruleId":"144","severity":1,"message":"156","line":93,"column":10,"nodeType":"146","messageId":"147","endLine":93,"endColumn":27},{"ruleId":"144","severity":1,"message":"157","line":93,"column":29,"nodeType":"146","messageId":"147","endLine":93,"endColumn":49},{"ruleId":"158","severity":1,"message":"159","line":122,"column":36,"nodeType":"160","messageId":"161","endLine":122,"endColumn":38},{"ruleId":"144","severity":1,"message":"162","line":132,"column":11,"nodeType":"146","messageId":"147","endLine":132,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":147,"column":19,"nodeType":"160","messageId":"161","endLine":147,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":152,"column":28,"nodeType":"160","messageId":"161","endLine":152,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":154,"column":32,"nodeType":"160","messageId":"161","endLine":154,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":156,"column":33,"nodeType":"160","messageId":"161","endLine":156,"endColumn":35},{"ruleId":"158","severity":1,"message":"159","line":157,"column":34,"nodeType":"160","messageId":"161","endLine":157,"endColumn":36},{"ruleId":"158","severity":1,"message":"159","line":159,"column":32,"nodeType":"160","messageId":"161","endLine":159,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":160,"column":26,"nodeType":"160","messageId":"161","endLine":160,"endColumn":28},{"ruleId":"144","severity":1,"message":"163","line":235,"column":13,"nodeType":"146","messageId":"147","endLine":235,"endColumn":23},{"ruleId":"144","severity":1,"message":"164","line":254,"column":17,"nodeType":"146","messageId":"147","endLine":254,"endColumn":38},{"ruleId":"144","severity":1,"message":"163","line":266,"column":13,"nodeType":"146","messageId":"147","endLine":266,"endColumn":23},{"ruleId":"144","severity":1,"message":"145","line":3,"column":22,"nodeType":"146","messageId":"147","endLine":3,"endColumn":31},{"ruleId":"144","severity":1,"message":"148","line":51,"column":11,"nodeType":"146","messageId":"147","endLine":51,"endColumn":25},{"ruleId":"144","severity":1,"message":"149","line":52,"column":11,"nodeType":"146","messageId":"147","endLine":52,"endColumn":25},{"ruleId":"144","severity":1,"message":"150","line":1,"column":51,"nodeType":"146","messageId":"147","endLine":1,"endColumn":64},{"ruleId":"144","severity":1,"message":"151","line":2,"column":34,"nodeType":"146","messageId":"147","endLine":2,"endColumn":39},{"ruleId":"144","severity":1,"message":"152","line":7,"column":13,"nodeType":"146","messageId":"147","endLine":7,"endColumn":16},{"ruleId":"144","severity":1,"message":"153","line":14,"column":5,"nodeType":"146","messageId":"147","endLine":14,"endColumn":13},{"ruleId":"144","severity":1,"message":"154","line":90,"column":10,"nodeType":"146","messageId":"147","endLine":90,"endColumn":13},{"ruleId":"144","severity":1,"message":"155","line":90,"column":15,"nodeType":"146","messageId":"147","endLine":90,"endColumn":21},{"ruleId":"144","severity":1,"message":"156","line":94,"column":10,"nodeType":"146","messageId":"147","endLine":94,"endColumn":27},{"ruleId":"144","severity":1,"message":"157","line":94,"column":29,"nodeType":"146","messageId":"147","endLine":94,"endColumn":49},{"ruleId":"158","severity":1,"message":"159","line":123,"column":36,"nodeType":"160","messageId":"161","endLine":123,"endColumn":38},{"ruleId":"144","severity":1,"message":"162","line":133,"column":11,"nodeType":"146","messageId":"147","endLine":133,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":148,"column":19,"nodeType":"160","messageId":"161","endLine":148,"endColumn":21},{"ruleId":"158","severity":1,"message":"159","line":153,"column":28,"nodeType":"160","messageId":"161","endLine":153,"endColumn":30},{"ruleId":"158","severity":1,"message":"159","line":155,"column":32,"nodeType":"160","messageId":"161","endLine":155,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":157,"column":33,"nodeType":"160","messageId":"161","endLine":157,"endColumn":35},{"ruleId":"158","severity":1,"message":"159","line":158,"column":34,"nodeType":"160","messageId":"161","endLine":158,"endColumn":36},{"ruleId":"158","severity":1,"message":"159","line":160,"column":32,"nodeType":"160","messageId":"161","endLine":160,"endColumn":34},{"ruleId":"158","severity":1,"message":"159","line":161,"column":26,"nodeType":"160","messageId":"161","endLine":161,"endColumn":28},{"ruleId":"144","severity":1,"message":"163","line":237,"column":13,"nodeType":"146","messageId":"147","endLine":237,"endColumn":23},{"ruleId":"144","severity":1,"message":"164","line":256,"column":17,"nodeType":"146","messageId":"147","endLine":256,"endColumn":38},{"ruleId":"144","severity":1,"message":"163","line":268,"column":13,"nodeType":"146","messageId":"147","endLine":268,"endColumn":23},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],["165"],["166"],"@typescript-eslint/no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'responseAdress' is assigned a value but never used.","'responseDoctor' is assigned a value but never used.","'KeyboardEvent' is defined but never used.","'Alert' is defined but never used.","'Yup' is defined but never used.","'IDs' is defined but never used.","'cep' is assigned a value but never used.","'setCep' is assigned a value but never used.","'specialtiesDoctor' is assigned a value but never used.","'setSpecialtiesDoctor' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'responseSpecialties' is assigned a value but never used.","'respAdress' is assigned a value but never used.","'respSpecialtiesDoctor' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]